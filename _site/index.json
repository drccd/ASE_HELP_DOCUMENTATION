{
  "api/Finalassignment.AppCanvas.html": {
    "href": "api/Finalassignment.AppCanvas.html",
    "title": "Class AppCanvas | ASE Assignment",
    "keywords": "Class AppCanvas Namespace Finalassignment Assembly Finalassignment.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering on the canvas. Constructors AppCanvas() Initializes a new instance of the AppCanvas class with default canvas size. public AppCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/Finalassignment.AppCircle.html": {
    "href": "api/Finalassignment.AppCircle.html",
    "title": "Class AppCircle | ASE Assignment",
    "keywords": "Class AppCircle Namespace Finalassignment Assembly Finalassignment.dll Represents a command to draw a circle on a canvas. public class AppCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandOneParameter class and allows drawing circles of specified radius on the canvas. Includes proper exception handling for invalid parameters and radius constraints. Constructors AppCircle() Initializes a new instance of the AppCircle class. public AppCircle() AppCircle(Canvas, int) Initializes a new instance of the CommandCircle class with a specified canvas and radius. public AppCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw a circle. public override void Execute() Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. CommandException Thrown when an unexpected error occurs."
  },
  "api/Finalassignment.AppCommandFactory.html": {
    "href": "api/Finalassignment.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Assignment",
    "keywords": "Class AppCommandFactory Namespace Finalassignment Assembly Finalassignment.dll AppCommandFactory is a concrete implementation of the CommandFactory class. This factory is responsible for creating specific commands based on the provided command string. It overrides the MakeCommand method to handle specific types of commands. If an invalid command is passed, it logs the error using FactoryException and prevents program termination. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates a specific BOOSE.ICommand based on the provided command string. The method checks the command string and returns the corresponding ICommand object. If the command is invalid, a FactoryException is caught, logged, and handled safely. public override ICommand MakeCommand(string command) Parameters command string The command string to create a corresponding ICommand. Returns ICommand An BOOSE.ICommand corresponding to the provided command string, or null if the command is invalid."
  },
  "api/Finalassignment.AppDrawTo.html": {
    "href": "api/Finalassignment.AppDrawTo.html",
    "title": "Class AppDrawTo | ASE Assignment",
    "keywords": "Class AppDrawTo Namespace Finalassignment Assembly Finalassignment.dll public class AppDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppDrawTo() public AppDrawTo() AppDrawTo(Canvas, int, int) public AppDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas x int y int Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/Finalassignment.AppMoveTo.html": {
    "href": "api/Finalassignment.AppMoveTo.html",
    "title": "Class AppMoveTo | ASE Assignment",
    "keywords": "Class AppMoveTo Namespace Finalassignment Assembly Finalassignment.dll Represents a command to move to a specified position on a canvas. public class AppMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandTwoParameters class and allows moving to a specific position (x, y) on the canvas. Includes proper exception handling for invalid parameters. Constructors AppMoveTo() Initializes a new instance of the CommandMoveTo class. public AppMoveTo() AppMoveTo(Canvas, int, int) Initializes a new instance of the CommandMoveTo class with a specified canvas and coordinates. public AppMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the move operation will occur. x int The x-coordinate to move to. y int The y-coordinate to move to. Exceptions RestrictionException Thrown when coordinates exceed the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to move to the specified position. public override void Execute() Exceptions RestrictionException Thrown when the coordinates exceed the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/Finalassignment.AppPenColour.html": {
    "href": "api/Finalassignment.AppPenColour.html",
    "title": "Class AppPenColour | ASE Assignment",
    "keywords": "Class AppPenColour Namespace Finalassignment Assembly Finalassignment.dll public class AppPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters AppPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPenColour() public AppPenColour() AppPenColour(Canvas, int, int, int) public AppPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas r int g int b int Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/Finalassignment.AppPraser.html": {
    "href": "api/Finalassignment.AppPraser.html",
    "title": "Class AppPraser | ASE Assignment",
    "keywords": "Class AppPraser Namespace Finalassignment Assembly Finalassignment.dll public class AppPraser : IParser Inheritance object AppPraser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppPraser(CommandFactory, StoredProgram) public AppPraser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory program StoredProgram Methods ParseCommand(string) public virtual ICommand ParseCommand(string line) Parameters line string Returns ICommand ParseProgram(string) public virtual void ParseProgram(string program) Parameters program string"
  },
  "api/Finalassignment.AppRectangle.html": {
    "href": "api/Finalassignment.AppRectangle.html",
    "title": "Class AppRectangle | ASE Assignment",
    "keywords": "Class AppRectangle Namespace Finalassignment Assembly Finalassignment.dll public class AppRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppRectangle() public AppRectangle() AppRectangle(Canvas, int, int) public AppRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas width int height int Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/Finalassignment.ApplicationArray.html": {
    "href": "api/Finalassignment.ApplicationArray.html",
    "title": "Class ApplicationArray | ASE Assignment",
    "keywords": "Class ApplicationArray Namespace Finalassignment Assembly Finalassignment.dll Represents a multi-dimensional array with support for integer and real values. Includes methods to define, access, and manipulate array elements. public class ApplicationArray : Evaluation, ICommand Inheritance object Command Evaluation ApplicationArray Implements ICommand Derived ApplicationPeek ApplicationPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationArray() Initializes a new instance of the ApplicationArray class. public ApplicationArray() Fields IntValue The current integer value being processed. protected int IntValue Field Value int PEEK A constant indicating whether the operation is for peeking (false). protected const bool PEEK = false Field Value bool POKE A constant indicating whether the operation is for poking (true). public const bool POKE = true Field Value bool RealValue The current real value being processed. protected double RealValue Field Value double columnCurrent The current column index being processed. protected int columnCurrent Field Value int columnExpression The expression for the current column index. protected string columnExpression Field Value string columnsCount The number of columns in the array (default is 1). protected int columnsCount Field Value int intArray The integer array storage. protected int[,] intArray Field Value int[,] peekValue The value to be retrieved during peek operations. protected string peekValue Field Value string pokeValue The value to be used for poke operations. protected string pokeValue Field Value string realArray The real array storage. protected double[,] realArray Field Value double[,] rowCurrent The current row index being processed. protected int rowCurrent Field Value int rowExpression The expression for the current row index. protected string rowExpression Field Value string rowsCount The number of rows in the array. protected int rowsCount Field Value int type The type of the array (e.g., \"int\" or \"real\"). protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Defines restrictions for the array operations. public void ArrayRestrictions() CheckParameters(string[]) Validates the parameters for the array definition. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Compile() Compiles the array definition based on the provided parameters. public override void Compile() Execute() Executes the array initialization logic. public override void Execute() GetIntArray(int, int) Gets the value of an integer array at the specified row and column. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The value of the array element. GetRealArray(int, int) Gets the value of a real array at the specified row and column. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The value of the array element. ProcessArrayParametersCompile(bool) Processes the parameters for array operations during compilation. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a poke operation. ProcessArrayParametersExecute(bool) Processes the parameters for array operations during execution. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a poke operation. ReduceRestrictionCounter() Reduces the restriction counter for array operations. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets the value of an integer array at the specified row and column. public virtual void SetIntArray(int value, int row, int col) Parameters value int The value to set. row int The row index. col int The column index. SetRealArray(double, int, int) Sets the value of a real array at the specified row and column. public virtual void SetRealArray(double value, int row, int col) Parameters value double The value to set. row int The row index. col int The column index."
  },
  "api/Finalassignment.ApplicationBoolean.html": {
    "href": "api/Finalassignment.ApplicationBoolean.html",
    "title": "Class ApplicationBoolean | ASE Assignment",
    "keywords": "Class ApplicationBoolean Namespace Finalassignment Assembly Finalassignment.dll Represents a class for managing boolean variables in the application. This class extends the BOOSE.Boolean class and provides specific functionality for boolean handling. public class ApplicationBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean ApplicationBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines the restrictions for boolean variables in the application. This method is intended to enforce any necessary constraints or validation for boolean operations. public override void Restrictions()"
  },
  "api/Finalassignment.ApplicationCast.html": {
    "href": "api/Finalassignment.ApplicationCast.html",
    "title": "Class ApplicationCast | ASE Assignment",
    "keywords": "Class ApplicationCast Namespace Finalassignment Assembly Finalassignment.dll Represents a command for casting variables in the application. This class handles casting between supported variable types, with specific logic for type conversion. public class ApplicationCast : Command, ICommand Inheritance object Command ApplicationCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters passed to the cast command. Ensures exactly two parameters are provided. public override void CheckParameters(string[] parameter) Parameters parameter string[] The list of parameters to validate. Exceptions CommandException Thrown if the number of parameters is invalid. Compile() Compiles the cast command, ensuring the variables exist and are of compatible types. public override void Compile() Exceptions CommandException Thrown if one or both variables do not exist or if the source type is incompatible. Execute() Executes the cast operation, converting the source integer variable to the target real variable. public override void Execute() Exceptions InvalidCastException Thrown if the casting operation fails."
  },
  "api/Finalassignment.ApplicationCompoundCommand.html": {
    "href": "api/Finalassignment.ApplicationCompoundCommand.html",
    "title": "Class ApplicationCompoundCommand | ASE Assignment",
    "keywords": "Class ApplicationCompoundCommand Namespace Finalassignment Assembly Finalassignment.dll public class ApplicationCompoundCommand : ApplicationConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand Implements ICommand Derived ApplicationElse ApplicationEnd ApplicationIf ApplicationWhile Inherited Members ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCompoundCommand() public ApplicationCompoundCommand() Properties CorrespondingCommand public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) public override void CheckParameters(string[] parameters) Parameters parameters string[] Compile() public override void Compile() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/Finalassignment.ApplicationConditionalCommand.html": {
    "href": "api/Finalassignment.ApplicationConditionalCommand.html",
    "title": "Class ApplicationConditionalCommand | ASE Assignment",
    "keywords": "Class ApplicationConditionalCommand Namespace Finalassignment Assembly Finalassignment.dll public class ApplicationConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand Implements ICommand Derived ApplicationCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/Finalassignment.ApplicationElse.html": {
    "href": "api/Finalassignment.ApplicationElse.html",
    "title": "Class ApplicationElse | ASE Assignment",
    "keywords": "Class ApplicationElse Namespace Finalassignment Assembly Finalassignment.dll Represents the \"else\" command in the application, which provides an alternative execution path in conditional logic. public class ApplicationElse : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationElse Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationElse() Initializes a new instance of the ApplicationElse class. public ApplicationElse() Properties CorrespondingEnd Gets or sets the corresponding BOOSE.End command associated with this \"else\" block. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters provided for the \"else\" command. Ensures that the single parameter is the keyword \"else\". public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate. Exceptions CommandException Thrown if the parameters are invalid (e.g., not exactly one parameter or not \"else\"). Compile() Compiles the \"else\" command by linking it to its corresponding conditional command and marking the line number for execution flow control. public override void Compile() Execute() Executes the \"else\" command. Skips the block if the condition of the corresponding conditional command evaluates to true. public override void Execute()"
  },
  "api/Finalassignment.ApplicationEnd.html": {
    "href": "api/Finalassignment.ApplicationEnd.html",
    "title": "Class ApplicationEnd | ASE Assignment",
    "keywords": "Class ApplicationEnd Namespace Finalassignment Assembly Finalassignment.dll Represents the \"end\" command in the application, which marks the end of compound commands such as \"if\", \"while\", \"for\", and methods. public class ApplicationEnd : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationEnd Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationEnd() Initializes a new instance of the ApplicationEnd class. public ApplicationEnd() Methods Compile() Compiles the \"end\" command, linking it with its corresponding compound command. Ensures syntax correctness and sets execution flow markers. public override void Compile() Exceptions CommandException Thrown when the syntax is invalid or the corresponding command's end marker is incorrect. Execute() Executes the \"end\" command by controlling the execution flow based on the type of the corresponding command. public override void Execute() Exceptions CommandException Thrown if loop control variables do not exist or if the loop step is invalid."
  },
  "api/Finalassignment.ApplicationFor.html": {
    "href": "api/Finalassignment.ApplicationFor.html",
    "title": "Class ApplicationFor | ASE Assignment",
    "keywords": "Class ApplicationFor Namespace Finalassignment Assembly Finalassignment.dll public class ApplicationFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For ApplicationFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/Finalassignment.ApplicationIf.html": {
    "href": "api/Finalassignment.ApplicationIf.html",
    "title": "Class ApplicationIf | ASE Assignment",
    "keywords": "Class ApplicationIf Namespace Finalassignment Assembly Finalassignment.dll Represents the \"if\" command in the application, which introduces conditional logic for executing specific blocks of code. public class ApplicationIf : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationIf Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationIf() Initializes a new instance of the ApplicationIf class. public ApplicationIf() Methods ReduceRestrictions() Reduces restrictions applied to conditional logic. This method can be overridden or expanded to handle specific cases where default restrictions need to be relaxed or modified. protected void ReduceRestrictions()"
  },
  "api/Finalassignment.ApplicationInt.html": {
    "href": "api/Finalassignment.ApplicationInt.html",
    "title": "Class ApplicationInt | ASE Assignment",
    "keywords": "Class ApplicationInt Namespace Finalassignment Assembly Finalassignment.dll Represents an integer variable in the application. This class extends the base BOOSE.Int class and allows for further customization. public class ApplicationInt : Int, ICommand Inheritance object Command Evaluation Int ApplicationInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines restrictions or constraints for the integer variable. This method can be overridden to implement custom validation logic specific to the application. public override void Restrictions()"
  },
  "api/Finalassignment.ApplicationMethod.html": {
    "href": "api/Finalassignment.ApplicationMethod.html",
    "title": "Class ApplicationMethod | ASE Assignment",
    "keywords": "Class ApplicationMethod Namespace Finalassignment Assembly Finalassignment.dll public class ApplicationMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method ApplicationMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationMethod() public ApplicationMethod() Methods ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int ResetOrDecreaseMethodCount(int) public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int"
  },
  "api/Finalassignment.ApplicationPeek.html": {
    "href": "api/Finalassignment.ApplicationPeek.html",
    "title": "Class ApplicationPeek | ASE Assignment",
    "keywords": "Class ApplicationPeek Namespace Finalassignment Assembly Finalassignment.dll Represents the \"Peek\" operation that extends the ApplicationArray class. Used to retrieve data from an array without modifying it. public class ApplicationPeek : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPeek Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPeek() Initializes a new instance of the ApplicationPeek class. public ApplicationPeek() Methods CheckParameters(string[]) Checks the provided parameters for validity specific to the \"Peek\" operation. This method is not yet implemented for the Peek operation. public override void CheckParameters(string[] parameters) Parameters parameters string[] The parameters to validate. Exceptions NotImplementedException Thrown when the method is not implemented. Compile() Compiles the operation, preparing it for execution. public override void Compile() Execute() Executes the Peek operation, updating the corresponding variable with the array's value. public override void Execute() Exceptions CommandException Thrown when an unsupported array type is encountered."
  },
  "api/Finalassignment.ApplicationPoke.html": {
    "href": "api/Finalassignment.ApplicationPoke.html",
    "title": "Class ApplicationPoke | ASE Assignment",
    "keywords": "Class ApplicationPoke Namespace Finalassignment Assembly Finalassignment.dll Represents the \"Poke\" operation that extends the ApplicationArray class. Used to modify the values in an array at specific positions. public class ApplicationPoke : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPoke Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPoke() Initializes a new instance of the ApplicationPoke class. public ApplicationPoke() Methods CheckParameters(string[]) Checks the provided parameters for validity specific to the \"Poke\" operation. Validates that the number of parameters is either 2 or 3. public override void CheckParameters(string[] parameter) Parameters parameter string[] The parameters to validate. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Compiles the operation, preparing it for execution. public override void Compile() Execute() Executes the Poke operation, modifying the array elements. public override void Execute() Set(StoredProgram, string) Sets the program and parameters for the Poke operation. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The program to be set. paramsList string The list of parameters for the operation."
  },
  "api/Finalassignment.ApplicationReal.html": {
    "href": "api/Finalassignment.ApplicationReal.html",
    "title": "Class ApplicationReal | ASE Assignment",
    "keywords": "Class ApplicationReal Namespace Finalassignment Assembly Finalassignment.dll public class ApplicationReal : Real, ICommand Inheritance object Command Evaluation Real ApplicationReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Contains any restrictions or constraints specific to the ApplicationReal type. Currently, no restrictions have been defined. public override void Restrictions()"
  },
  "api/Finalassignment.ApplicationStoredProgram.html": {
    "href": "api/Finalassignment.ApplicationStoredProgram.html",
    "title": "Class ApplicationStoredProgram | ASE Assignment",
    "keywords": "Class ApplicationStoredProgram Namespace Finalassignment Assembly Finalassignment.dll Represents a stored program that includes methods, variables, and execution logic. Inherits from the StoredProgram base class. public class ApplicationStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram ApplicationStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationStoredProgram(ICanvas) Initializes a new instance of the ApplicationStoredProgram class with the specified canvas. public ApplicationStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas used for rendering the program. Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter (PC). public override int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the program. public override int Add(Command C) Parameters C Command The command to add. Returns int The index of the added command. Exceptions StoredProgramException Thrown when the command is null. AddMethod(Method) Adds a method to the stored program. public override void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a variable to the stored program. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. Commandsleft() Determines whether there are more commands left to execute. public override bool Commandsleft() Returns bool True if more commands remain, otherwise false. DeleteVariable(string) Deletes a variable by its name. public override void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. EvaluateExpression(string) Evaluates an expression and returns the result as a string. public override string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The evaluated result as a string. Exceptions StoredProgramException Thrown if the expression contains syntax or evaluation errors. EvaluateExpressionWithString(string) Evaluates an expression and returns the result as a string. public override string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The evaluated result as a string. FindVariable(string) Finds the index of a variable by name. public override int FindVariable(string varName) Parameters varName string The name of the variable. Returns int The index of the variable, or -1 if not found. GetMethod(string) Retrieves a method by name from the stored program. public override Method GetMethod(string MethodName) Parameters MethodName string The name of the method. Returns Method The method object. Exceptions StoredProgramException Thrown when the method is not found. GetVarValue(string) Retrieves the value of a variable as a string. public override string GetVarValue(string varName) Parameters varName string The name of the variable. Returns string The string representation of the variable's value. Exceptions StoredProgramException Thrown when the variable is not found. GetVariable(int) Retrieves a variable by its index from the stored program. public override Evaluation GetVariable(int index) Parameters index int The index of the variable. Returns Evaluation The variable object. Exceptions StoredProgramException Thrown when the index is invalid. GetVariable(string) Retrieves a variable by name from the stored program. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable. Returns Evaluation The variable object. Exceptions StoredProgramException Thrown when the variable is not found. IsExpression(string) Determines whether the provided string is an expression. public override bool IsExpression(string expression) Parameters expression string The string to check. Returns bool True if the string is an expression, otherwise false. NextCommand() Retrieves the next command to execute. public override object NextCommand() Returns object The next command in the program. Pop() Pops a conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The popped conditional command. Exceptions StoredProgramException Thrown when the stack is empty. Push(ConditionalCommand) Pushes a conditional command onto the stack. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the program state, clearing the canvas and variables. public virtual void ResetProgram() Run() Executes the stored program, running each command in order. public override void Run() UpdateVariable(string, bool) Updates a variable's value with a boolean. public override void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable to update. value bool The boolean value to set. Exceptions CommandException Thrown if the variable type is invalid for the operation. UpdateVariable(string, double) Updates a variable's value with a double. public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable to update. value double The double value to set. Exceptions CommandException Thrown if the variable type is invalid for the operation. UpdateVariable(string, int) Updates a variable's value with an integer. public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable to update. value int The integer value to set. VariableExists(string) Checks if a variable exists in the stored program. public override bool VariableExists(string varName) Parameters varName string The name of the variable. Returns bool True if the variable exists, otherwise false."
  },
  "api/Finalassignment.ApplicationWhile.html": {
    "href": "api/Finalassignment.ApplicationWhile.html",
    "title": "Class ApplicationWhile | ASE Assignment",
    "keywords": "Class ApplicationWhile Namespace Finalassignment Assembly Finalassignment.dll Represents an application-specific implementation of a while loop command. This class inherits from the ApplicationCompoundCommand class. public class ApplicationWhile : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationWhile Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationWhile() Initializes a new instance of the ApplicationWhile class. public ApplicationWhile() Methods ReduceRestrictions() Reduces the restrictions applied in the current context. This method may be implemented to modify the behavior of the command. protected void ReduceRestrictions()"
  },
  "api/Finalassignment.CanvasException.html": {
    "href": "api/Finalassignment.CanvasException.html",
    "title": "Class CanvasException | ASE Assignment",
    "keywords": "Class CanvasException Namespace Finalassignment Assembly Finalassignment.dll Represents errors that occur in the canvas operations. public class CanvasException : Exception, ISerializable Inheritance object Exception CanvasException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CanvasException() Initializes a new instance of the CanvasException class. public CanvasException() CanvasException(string) Initializes a new instance of the CanvasException class with a specified error message. public CanvasException(string message) Parameters message string The message that describes the error. CanvasException(string, Exception) Initializes a new instance of the CanvasException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CanvasException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "api/Finalassignment.CanvasLoader.html": {
    "href": "api/Finalassignment.CanvasLoader.html",
    "title": "Class CanvasLoader | ASE Assignment",
    "keywords": "Class CanvasLoader Namespace Finalassignment Assembly Finalassignment.dll public class CanvasLoader Inheritance object CanvasLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CanvasLoader() public CanvasLoader() Methods LoadCanvas() public Bitmap LoadCanvas() Returns Bitmap"
  },
  "api/Finalassignment.CanvasSaver.html": {
    "href": "api/Finalassignment.CanvasSaver.html",
    "title": "Class CanvasSaver | ASE Assignment",
    "keywords": "Class CanvasSaver Namespace Finalassignment Assembly Finalassignment.dll public class CanvasSaver Inheritance object CanvasSaver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CanvasSaver() public CanvasSaver() Methods SaveCanvas(Bitmap) public void SaveCanvas(Bitmap canvasBitmap) Parameters canvasBitmap Bitmap"
  },
  "api/Finalassignment.Clear.html": {
    "href": "api/Finalassignment.Clear.html",
    "title": "Class Clear | ASE Assignment",
    "keywords": "Class Clear Namespace Finalassignment Assembly Finalassignment.dll public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CommandOneParameter.CheckParameters(string[]) CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() public Clear() Clear(Canvas) public Clear(Canvas c) Parameters c Canvas Methods Execute() public override void Execute()"
  },
  "api/Finalassignment.Fill.html": {
    "href": "api/Finalassignment.Fill.html",
    "title": "Class Fill | ASE Assignment",
    "keywords": "Class Fill Namespace Finalassignment Assembly Finalassignment.dll public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Fill() public Fill() Fill(Canvas, string) public Fill(Canvas c, string text) Parameters c Canvas text string Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute() SetFilled(string) public void SetFilled(string isFilledStr) Parameters isFilledStr string"
  },
  "api/Finalassignment.FillForm.html": {
    "href": "api/Finalassignment.FillForm.html",
    "title": "Class FillForm | ASE Assignment",
    "keywords": "Class FillForm Namespace Finalassignment Assembly Finalassignment.dll The FillForm class represents the main application form that provides functionalities for drawing on a canvas and managing program execution. public class FillForm : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form FillForm Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FillForm() Initializes a new instance of the FillForm class and sets up the initial configuration. public FillForm() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/Finalassignment.GlobalConfiguration.html": {
    "href": "api/Finalassignment.GlobalConfiguration.html",
    "title": "Class GlobalConfiguration | ASE Assignment",
    "keywords": "Class GlobalConfiguration Namespace Finalassignment Assembly Finalassignment.dll public class GlobalConfiguration Inheritance object GlobalConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled public static bool IsFillEnabled { get; set; } Property Value bool MaxX public static int MaxX { get; set; } Property Value int MaxY public static int MaxY { get; set; } Property Value int OutputExceptionMsg public static string OutputExceptionMsg { get; set; } Property Value string"
  },
  "api/Finalassignment.Reset.html": {
    "href": "api/Finalassignment.Reset.html",
    "title": "Class Reset | ASE Assignment",
    "keywords": "Class Reset Namespace Finalassignment Assembly Finalassignment.dll public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() public Reset() Reset(Canvas) public Reset(Canvas c) Parameters c Canvas Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/Finalassignment.Triangle.html": {
    "href": "api/Finalassignment.Triangle.html",
    "title": "Class Triangle | ASE Assignment",
    "keywords": "Class Triangle Namespace Finalassignment Assembly Finalassignment.dll Represents a command to draw a triangle on the Canvas with validation. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Triangle() Initializes a new instance of the Triangle class. public Triangle() Triangle(Canvas, int, int) Initializes a new instance of the Triangle class with a specified Canvas, base length, and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas The Canvas object to draw the triangle on. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates the parameters provided for the Triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the base length and height. Exceptions CommandException Thrown when the parameter list is invalid or contains incorrect data. Execute() Executes the command to draw a triangle on the Canvas. public override void Execute() Exceptions RestrictionException Thrown when the base length or height exceeds the allowed limit."
  },
  "api/Finalassignment.WriteTo.html": {
    "href": "api/Finalassignment.WriteTo.html",
    "title": "Class WriteTo | ASE Assignment",
    "keywords": "Class WriteTo Namespace Finalassignment Assembly Finalassignment.dll public class WriteTo : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteTo Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteTo() public WriteTo() WriteTo(Canvas, string) public WriteTo(Canvas c, string text) Parameters c Canvas text string Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/Finalassignment.html": {
    "href": "api/Finalassignment.html",
    "title": "Namespace Finalassignment | ASE Assignment",
    "keywords": "Namespace Finalassignment Classes AppCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. AppCircle Represents a command to draw a circle on a canvas. AppCommandFactory AppCommandFactory is a concrete implementation of the CommandFactory class. This factory is responsible for creating specific commands based on the provided command string. It overrides the MakeCommand method to handle specific types of commands. If an invalid command is passed, it logs the error using FactoryException and prevents program termination. AppDrawTo AppMoveTo Represents a command to move to a specified position on a canvas. AppPenColour AppPraser AppRectangle ApplicationArray Represents a multi-dimensional array with support for integer and real values. Includes methods to define, access, and manipulate array elements. ApplicationBoolean Represents a class for managing boolean variables in the application. This class extends the BOOSE.Boolean class and provides specific functionality for boolean handling. ApplicationCast Represents a command for casting variables in the application. This class handles casting between supported variable types, with specific logic for type conversion. ApplicationCompoundCommand ApplicationConditionalCommand ApplicationElse Represents the \"else\" command in the application, which provides an alternative execution path in conditional logic. ApplicationEnd Represents the \"end\" command in the application, which marks the end of compound commands such as \"if\", \"while\", \"for\", and methods. ApplicationFor ApplicationIf Represents the \"if\" command in the application, which introduces conditional logic for executing specific blocks of code. ApplicationInt Represents an integer variable in the application. This class extends the base BOOSE.Int class and allows for further customization. ApplicationMethod ApplicationPeek Represents the \"Peek\" operation that extends the ApplicationArray class. Used to retrieve data from an array without modifying it. ApplicationPoke Represents the \"Poke\" operation that extends the ApplicationArray class. Used to modify the values in an array at specific positions. ApplicationReal ApplicationStoredProgram Represents a stored program that includes methods, variables, and execution logic. Inherits from the StoredProgram base class. ApplicationWhile Represents an application-specific implementation of a while loop command. This class inherits from the ApplicationCompoundCommand class. CanvasLoader CanvasSaver Clear Fill FillForm The FillForm class represents the main application form that provides functionalities for drawing on a canvas and managing program execution. GlobalConfiguration Reset Triangle Represents a command to draw a triangle on the Canvas with validation. WriteTo"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Assignment",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Assignment",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Assignment",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}